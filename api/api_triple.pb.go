// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.5
// - protoc             v3.21.9
// source: api.proto

package api

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// IdServiceClient is the client API for IdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdServiceClient interface {
	// 请求id
	Id(ctx context.Context, in *IdRequest, opts ...grpc_go.CallOption) (*IdResponse, common.ErrorWithAttachment)
	// 批量生成id
	Ids(ctx context.Context, in *IdBatchRequest, opts ...grpc_go.CallOption) (*IdBatchResponse, common.ErrorWithAttachment)
	// id 逆解析
	Inverse(ctx context.Context, in *IdInverseRequest, opts ...grpc_go.CallOption) (*IdInverseResponse, common.ErrorWithAttachment)
}

type idServiceClient struct {
	cc *triple.TripleConn
}

type IdServiceClientImpl struct {
	Id      func(ctx context.Context, in *IdRequest) (*IdResponse, error)
	Ids     func(ctx context.Context, in *IdBatchRequest) (*IdBatchResponse, error)
	Inverse func(ctx context.Context, in *IdInverseRequest) (*IdInverseResponse, error)
}

func (c *IdServiceClientImpl) GetDubboStub(cc *triple.TripleConn) IdServiceClient {
	return NewIdServiceClient(cc)
}

func (c *IdServiceClientImpl) XXX_InterfaceName() string {
	return "api.IdService"
}

func NewIdServiceClient(cc *triple.TripleConn) IdServiceClient {
	return &idServiceClient{cc}
}

func (c *idServiceClient) Id(ctx context.Context, in *IdRequest, opts ...grpc_go.CallOption) (*IdResponse, common.ErrorWithAttachment) {
	out := new(IdResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Id", in, out)
}

func (c *idServiceClient) Ids(ctx context.Context, in *IdBatchRequest, opts ...grpc_go.CallOption) (*IdBatchResponse, common.ErrorWithAttachment) {
	out := new(IdBatchResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Ids", in, out)
}

func (c *idServiceClient) Inverse(ctx context.Context, in *IdInverseRequest, opts ...grpc_go.CallOption) (*IdInverseResponse, common.ErrorWithAttachment) {
	out := new(IdInverseResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/Inverse", in, out)
}

// IdServiceServer is the server API for IdService service.
// All implementations must embed UnimplementedIdServiceServer
// for forward compatibility
type IdServiceServer interface {
	// 请求id
	Id(context.Context, *IdRequest) (*IdResponse, error)
	// 批量生成id
	Ids(context.Context, *IdBatchRequest) (*IdBatchResponse, error)
	// id 逆解析
	Inverse(context.Context, *IdInverseRequest) (*IdInverseResponse, error)
	mustEmbedUnimplementedIdServiceServer()
}

// UnimplementedIdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIdServiceServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedIdServiceServer) Id(context.Context, *IdRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Id not implemented")
}
func (UnimplementedIdServiceServer) Ids(context.Context, *IdBatchRequest) (*IdBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ids not implemented")
}
func (UnimplementedIdServiceServer) Inverse(context.Context, *IdInverseRequest) (*IdInverseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inverse not implemented")
}
func (s *UnimplementedIdServiceServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedIdServiceServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedIdServiceServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &IdService_ServiceDesc
}
func (s *UnimplementedIdServiceServer) XXX_InterfaceName() string {
	return "api.IdService"
}

func (UnimplementedIdServiceServer) mustEmbedUnimplementedIdServiceServer() {}

// UnsafeIdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdServiceServer will
// result in compilation errors.
type UnsafeIdServiceServer interface {
	mustEmbedUnimplementedIdServiceServer()
}

func RegisterIdServiceServer(s grpc_go.ServiceRegistrar, srv IdServiceServer) {
	s.RegisterService(&IdService_ServiceDesc, srv)
}

func _IdService_Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Id", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _IdService_Ids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Ids", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _IdService_Inverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdInverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("Inverse", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

// IdService_ServiceDesc is the grpc_go.ServiceDesc for IdService service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdService_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "api.IdService",
	HandlerType: (*IdServiceServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "id",
			Handler:    _IdService_Id_Handler,
		},
		{
			MethodName: "ids",
			Handler:    _IdService_Ids_Handler,
		},
		{
			MethodName: "inverse",
			Handler:    _IdService_Inverse_Handler,
		},
	},
	Streams:  []grpc_go.StreamDesc{},
	Metadata: "api.proto",
}
